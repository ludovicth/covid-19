# Etape 0 : Chargement des données et des fonctions

# Chargement des fonctions
source("fonctions_elementaires.R")

# Chargement des données
mob_dom_trav_clust <- readRDS("flux_bv_pop_jour.rds")
summary(mob_dom_trav_clust$trav %in% mob_dom_trav_clust$dom)
mob_dom_trav_clust$dom <- as.character(mob_dom_trav_clust$dom )
mob_dom_trav_clust$trav <- as.character(mob_dom_trav_clust$trav )
mob_dom_trav_clust$pop <- as.character(mob_dom_trav_clust$pop )


# Etape 1 : calcul de la saturation des hôpitaux

# Pas de saturation des hôpitaux ici
# On pourra complexifier quand on disposera du nombre de lits par département

liste_clust <- unique(as.character(mob_dom_trav_clust$dom))
v_satur_hop <- setNames(rep(0, length(liste_clust)), liste_clust)

# Etape 2 : fonction de modélisation d'une journée

modele_journee <- function(pays, v_clust, flux_clust, contag, v_prob_sain, mat_prob_contact, mat_contact, d, g, v_prob_grav, v_satur_hop, mat_tx_mort){
  
  # pays = lapply(setNames(liste_clust, liste_clust), function(x) cluster_test); v_clust = liste_clust; v_flux_clust = mob_dom_trav_clust; contag = 0.005;  v_prob_sain = setNames(c(0.9, 0.99), c("vulnérable", "résistant")); mat_prob_contact = rbind(c(0.5, 0.5), c(0.1, 0.9)); d = 4; g = 7; mat_contact = matrix(c(rep(20, length(v_clust)), rep(100, length(v_clust))) , nrow = length(v_clust), dimnames = list(v_clust, c("vulnérable", "résistant"))); v_satur_hop = v_satur_hop; mat_tx_mort = rbind(c(0.9, 0.2), c(0.1, 0.01)); colnames(mat_tx_mort) = c("satur", "normal"); row.names(mat_tx_mort) = c("vulnérable", "résistant")  
  # pays = lapply(setNames(liste_clust, liste_clust), function(x) list(vulnérable = pop_test_2, résistant = pop_test_2) ); v_clust = liste_clust; v_flux_clust = mob_dom_trav_clust; contag = 0.005;  v_prob_sain = setNames(c(0.9, 0.99), c("vulnérable", "résistant")); mat_prob_contact = rbind(c(0.5, 0.5), c(0.1, 0.9)); d = 4; g = 7; mat_contact = matrix(c(rep(20, length(v_clust)), rep(100, length(v_clust))) , nrow = length(v_clust), dimnames = list(v_clust, c("vulnérable", "résistant"))); v_satur_hop = v_satur_hop; mat_tx_mort = rbind(c(0.9, 0.2), c(0.1, 0.01)); colnames(mat_tx_mort) = c("satur", "normal"); row.names(mat_tx_mort) = c("vulnérable", "résistant")  
  
  # Etape 2.1 : Vérifications
  if(ncol(v_flux_clust) != 4 | any( !names(v_flux_clust) %in% c("dom", "trav", "pop", "flux"))) stop("La structure de l'objet v_flux_clust n'est pas celle attendue.")
  if(length(pays) != length(v_clust)) stop("Il y a des clusters en trop dans l'objet pays, ou bien il en manque")
  if(any(! names(pays) %in% v_clust)) stop("Certains clusters dans l'objet pays ne sont pas dans la liste d'identifiants")
  liste_pop <- unique(v_flux_clust$pop)
  if(any(!liste_pop %in% names(v_prob_sain)) | any(! liste_pop %in% row.names(mat_tx_mort)) | any(! liste_pop %in% colnames(mat_contact))) stop("Certains paramètres ne sont pas définies pour quelques populations de v_flux_clust")
  
  # Etape 2.2 : départ vers un cluster pour les non contaminés, les malades non déclarés et les porteurs sains
  
  depart_trav <- lapply(setNames(names(pays), names(pays)), function(clust) depart_clust(nom_cluster = clust, pays[[clust]], flux_clust = v_flux_clust[v_flux_clust$dom == clust, ]))
  
  
    
  
  
  
}

# Remarque :
# On peut modéliser le confinement intra-communal en diminuant les flux flux_clust à partir d'une certaine journée
# On peut modéliser chaque jour la saturation des hôpitaux en chargeant des données sur les hôpitaux et en les comparant au nombre de malades graves dans le cluster ou à un niveau agrégé
# On peut modéliser chaque jour l'effet du confinement de la population en faisant varier mat_contact
# On peut modéliser chaque jour l'effet du confinement d'une partie de la population en faisant varier mat_prob_contact et mat_contact
# On peut modéliser le nombre de rencontres par jour par cluster mat_contact en jouant sur la densité de poplation
# Inconvénient du modèle mat_prob_contact devrait différer d'un cluster à l'autre (pas la même structure démographique dans tous les clusters). Ce n'est pas le cas.
